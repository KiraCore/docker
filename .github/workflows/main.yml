name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ main, dev, v*.*.*, feature/*, bugfix/* ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev, v*.*.*, feature/*, bugfix/* ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME_BASE: ${{ github.repository }}/base-image
  IMAGE_NAME_CORS: ${{ github.repository }}/cors-anywhere
  IMAGE_NAME_KIRA: ${{ github.repository }}/kira-base
  GITHUB_BRANCH: ${{ github.head_ref || github.ref_name }} 

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Extract branch name on push
        if: github.event_name == 'push'
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
      - name: Extract branch name on pull request
        if: github.event_name == 'pull_request'
        env:
          REF_BRANCH: ${{ github.event.pull_request.head.ref }}
          BASE_REF_BRANCH: ${{ github.base_ref }}
        shell: bash
        run: |
          echo "SOURCE_BRANCH=$(echo ${{ env.REF_BRANCH }} | tr / -)" >> $GITHUB_ENV
          echo "DESTINATION_BRANCH=$(echo ${{ env.BASE_REF_BRANCH }} | tr / -)" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v3.0.0
      - name: Build Docker Images from Docker.src
        shell: bash
        run: |
          ( [ "${{ github.event_name }}" == "push" ] && [[ ${{ env.SOURCE_BRANCH }} =~ "^(v?)([0-9]+)\.([0-9]+)\.([0-9]+)(-?)([a-zA-Z]+)?(\.?([0-9]+)?)$" ]] ) && echo "PUBLISH_IMAGES=true" >> $GITHUB_ENV || echo "PUBLISH_IMAGES=false" >> $GITHUB_ENV 
          chmod -R 555 ./scripts
          export SOURCE_BRANCH=${{ env.SOURCE_BRANCH }}
          make build
          echo "(current dir): $PWD" && ls -Rl ./
      # ref.: https://github.com/docker/setup-qemu-action, v1.2.0
      # Example: http://blog.mauriciofreitas.eng.br/docker/2020/12/25/multiarch-docker-build-github-actions-en.html
      - name: Setup QEMU (multi-platform)
        id: qemu
        uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480
        with:
          platforms: linux/amd64,linux/arm64
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.1.0
        with:
          cosign-release: 'v1.6.0'
      # Workaround: https://github.com/docker/build-push-action/issues/461
      # ref.: https://github.com/docker/setup-buildx-action, v1.6.0
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.14.1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata for cors-anywhere
        id: meta-cors
        uses: docker/metadata-action@v3.6.2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CORS }}
          labels: |
            org.opencontainers.image.licenses=AGPLv3
            org.opencontainers.image.url=ghcr.io/kiracore/docker/cors-anywhere:${{ env.GITHUB_BRANCH }}
            org.opencontainers.image.source=https://github.com/KiraCore/docker/cors-anywhere
            org.opencontainers.image.title=cors-anywhere
      - name: Extract Docker metadata for base-image
        id: meta-base
        uses: docker/metadata-action@v3.6.2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}
          labels: |
            org.opencontainers.image.licenses=AGPLv3
            org.opencontainers.image.url=ghcr.io/kiracore/docker/base-image:${{ env.GITHUB_BRANCH }}
            org.opencontainers.image.source=https://github.com/KiraCore/docker/base-image
            org.opencontainers.image.title=base-image
      - name: Extract Docker metadata for kira-image
        id: kira-base
        uses: docker/metadata-action@v3.6.2
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_KIRA }}
          labels: |
            org.opencontainers.image.licenses=AGPLv3
            org.opencontainers.image.url=ghcr.io/kiracore/docker/kira-base:${{ env.GITHUB_BRANCH }}
            org.opencontainers.image.source=https://github.com/KiraCore/docker/kira-base
            org.opencontainers.image.title=kira-base
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker base-image image
        id: build-and-push-base
        uses: docker/build-push-action@v2.9.0
        with:
          context: ./base-image
          file: ./base-image/Dockerfile
          push: ${{ env.PUBLISH_IMAGES }}
          tags: ${{ steps.meta-base.outputs.tags }}
          labels: ${{ steps.meta-base.outputs.labels }}
          platforms: linux/amd64,linux/arm64
      - name: Build and push Docker cors-anywhere image
        id: build-and-push-cors
        uses: docker/build-push-action@v2.9.0
        with:
          context: ./cors-anywhere
          file: ./cors-anywhere/Dockerfile
          push: ${{ env.PUBLISH_IMAGES }}
          tags: ${{ steps.meta-cors.outputs.tags }}
          labels: ${{ steps.meta-cors.outputs.labels }}
          platforms: linux/amd64,linux/arm64
      - name: Build and push Docker kira-base image
        id: build-and-push-kira
        uses: docker/build-push-action@v2.9.0
        with:
          context: ./kira-base
          file: ./kira-base/Dockerfile
          push: ${{ env.PUBLISH_IMAGES }}
          tags: ${{ steps.meta-cors.outputs.tags }}
          labels: ${{ steps.meta-cors.outputs.labels }}
          platforms: linux/amd64,linux/arm64
      # This is not the best way to store cosign keys, all must be wiped
      - name: Write signing key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker base-image image
        if: ${{ env.PUBLISH_IMAGES }}
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BASE }}:${{ env.GITHUB_BRANCH }}
          cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CORS }}:${{ env.GITHUB_BRANCH }}
          cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_KIRA }}:${{ env.GITHUB_BRANCH }}
      # If the secret is safely wiped, then the time its exposed to the build runner is very short
      - name: Remove signing key from disk
        if: always()
        run: 'shred -vzn 3 cosign.key && rm -fv cosign.key'
        shell: bash
